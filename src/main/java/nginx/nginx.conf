user              nobody nobody;

worker_processes  16;
error_log  /data/log/nginx/error.log  error;
#access_log /data/log/nginx/access.log  main;
pid        /var/run/nginx.pid;
worker_rlimit_nofile 1048576;

events {
    use epoll;
    multi_accept on;
    worker_connections  87381;
}

http {
        include       /etc/nginx/mime.types;
        default_type  text/plain;
        access_log  off;
        sendfile        on;
        tcp_nopush      on;
        tcp_nodelay     on;
        server_tokens off;
        client_max_body_size 30m;

        proxy_ignore_client_abort on;
        proxy_connect_timeout 50;
        proxy_read_timeout 50;
        proxy_send_timeout 50;

        keepalive_timeout  120;
        server_names_hash_bucket_size 128;
        fastcgi_connect_timeout 300s;
        fastcgi_send_timeout 300s;
        fastcgi_read_timeout 300s;
        fastcgi_buffer_size 128k;
        fastcgi_buffers 8 128k;
        fastcgi_busy_buffers_size 256k;
        fastcgi_temp_file_write_size 256k;
        variables_hash_max_size  1024;
        #set_real_ip_from 10.0.0.0/8;
        #set_real_ip_from 192.168.0.0/16;
        #real_ip_header X-Forwarded-For;
	#proxy_ignore_client_abort on;
        gzip on;
        gzip_min_length 1k;
        gzip_buffers 16 64k;
        gzip_http_version 1.1;
        gzip_comp_level 6;
        gzip_types text/plain application/x-javascript text/css application/xml;
        gzip_vary on;
        gzip_proxied any;
        #statsd_server statsd.kshwtj.com:9101;
        #statsd_sample_rate 100;

        log_format main '$remote_addr - $remote_user [$time_local] HOST:$http_host $request "$status" cost:$request_time $body_bytes_sent "$http_referer" "$http_user_agent" "$http_x_forwarded_for"' ;

#代理到dc
upstream arrow_dc {
    server 10.47.101.195:8888;
    server 10.47.101.20:8888;
    server 10.47.101.244:8888;
    keepalive 20;
}


#消息正向代理到dc
upstream msg_dc {
    server 54.250.253.138:80;
    server 54.250.253.129:80;
    keepalive 20;
}


#代理到GC
upstream arrow_dc_one_reverse {
    dynamic_resolve fallback=stale fail_timeout=10s;
    server arrowbjone.bj.1252921383.clb.myqcloud.com:9001;
    #server 10.46.100.26:9001;
}
#代理到GC
upstream arrow_dc_two_reverse {
    dynamic_resolve fallback=stale fail_timeout=10s;
    server arrowbjtwo.bj.1252921383.clb.myqcloud.com:9001;
    #server 10.46.100.218:9001;
}
#代理到GC
#upstream arrow_dc_three_reverse {
#    dynamic_resolve fallback=stale fail_timeout=10s;
#    server arrowbjthree.bj.1252921383.clb.myqcloud.com:9001;
    #server 10.46.100.126:9001;
#}
#代理到GC
#upstream arrow_dc_four_reverse {
#    dynamic_resolve fallback=stale fail_timeout=10s;
#    server arrowbjfour.bj.1252921383.clb.myqcloud.com:9001;
    #server 10.46.100.228:9001;
#}
#消息dc->gc消息方向
upstream msg_dc_one_reverse {
    dynamic_resolve fallback=stale fail_timeout=10s;
    server 10.46.101.2:8086;
    server 10.46.101.80:8086;
}
lua_package_path "/usr/local/nginx_lua/conf/?.lua;;";

#正向
server {
        listen       80 backlog=8192; # backlog代表此端口允许同时打开（tcp_syn）的最大数量
        server_name  _; # _代表默认域名
        charset utf-8;

        access_log /data/log/nginx/access.log  main;

        location =/speed {
            return 200;
        }

        #正向流量
        location / { # 定义首页目录
                proxy_set_header areaLocation cnbj;
                proxy_pass http://arrow_dc;
		proxy_http_version 1.1;
		proxy_set_header Connection "";
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header Host $host;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
	#消息正向流量
	location /msg-up { # 定义首页目录
                #proxy_set_header areaLocation cnbj;
                #proxy_pass http://msg_dc;
                #proxy_set_header X-Real-IP $remote_addr;
                #proxy_set_header Host $host;
                #proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

		add_header Access-Control-Allow-Origin '';
                add_header Access-Control-Allow-Headers *;
                add_header Access-Control-Allow-Methods GET,POST,OPTIONS;
                set $upstream "";
                rewrite_by_lua_file /usr/local/nginx_lua/conf/msg_gateway.lua;
                proxy_set_header areaLocation cnbj;
                proxy_pass http://$upstream; 
                proxy_http_version 1.1;
		proxy_set_header Connection "";
        	proxy_connect_timeout 5;
        	proxy_read_timeout 8;
        	proxy_send_timeout 8;
		proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header Host $host;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        }
	#消息拉取
	location /msg-down { # 定义首页目录
                proxy_set_header areaLocation cnbj;
                proxy_pass http://msg_dc_one_reverse;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header Host $host;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
	#参数下发
        location /gamep {
                proxy_set_header areaLocation cnbj;
                proxy_pass http://msg_dc_one_reverse;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header Host $host;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }

        location ~ ^(.*)\/\.(svn|git|hg|bzr|cvs)\/ { # 屏蔽这些目录
                deny all;
                access_log off;
                log_not_found off;
        }

        location ~ /\. { # 屏蔽.开头的目录或文件，比如  .htaccess .bash_history
                deny all;
                access_log off;
                log_not_found off;
        }
        location /do_not_delete.html {
                access_log off;
                empty_gif;
        }

}

#反向
server {
        listen       9001 backlog=8192; # backlog代表此端口允许同时打开（tcp_syn）的最大数量
        server_name  _; # _代表默认域名
        charset utf-8;
        access_log /data/log/nginx/access_reverse.log  main;
        #反向流量
        location /http {
                proxy_pass http://arrow_dc_one_reverse;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header Host $host;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
	#消息反向流量
	location /msg-dc-gc-inner {
                proxy_pass http://msg_dc_one_reverse;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header Host $host;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }
        location ~ ^(.*)\/\.(svn|git|hg|bzr|cvs)\/ { # 屏蔽这些目录
                deny all;
                access_log off;
                log_not_found off;
        }
        location ~ /\. { # 屏蔽.开头的目录或文件，比如  .htaccess .bash_history
                deny all;
                access_log off;
                log_not_found off;
        }
        location /do_not_delete.html {
                access_log off;
                empty_gif;
        }
}
#反向
server {
        listen       9000 backlog=8192; # backlog代表此端口允许同时打开（tcp_syn）的最大数量
        server_name  _; # _代表默认域名
        charset utf-8;
        access_log /data/log/nginx/access_reverse.log  main;
        #反向流量
        location /http {
                proxy_pass http://arrow_dc_two_reverse;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header Host $host;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }
        location ~ ^(.*)\/\.(svn|git|hg|bzr|cvs)\/ { # 屏蔽这些目录
                deny all;
                access_log off;
                log_not_found off;
        }
        location ~ /\. { # 屏蔽.开头的目录或文件，比如  .htaccess .bash_history
                deny all;
                access_log off;
                log_not_found off;
        }
        location /do_not_delete.html {
                access_log off;
                empty_gif;
        }
}
#反向
server {
        listen       9003 backlog=8192; # backlog代表此端口允许同时打开（tcp_syn）的最大数量
        server_name  _; # _代表默认域名
        charset utf-8;
        access_log /data/log/nginx/access_reverse.log  main;
        #反向流量
#        location /http {
#                proxy_pass http://arrow_dc_three_reverse;
#                proxy_set_header X-Real-IP $remote_addr;
#                proxy_set_header Host $host;
#                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#        }
        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }
        location ~ ^(.*)\/\.(svn|git|hg|bzr|cvs)\/ { # 屏蔽这些目录
                deny all;
                access_log off;
                log_not_found off;
        }
        location ~ /\. { # 屏蔽.开头的目录或文件，比如  .htaccess .bash_history
                deny all;
                access_log off;
                log_not_found off;
        }
        location /do_not_delete.html {
                access_log off;
                empty_gif;
        }
}
#反向
server {
        listen       9004 backlog=8192; # backlog代表此端口允许同时打开（tcp_syn）的最大数量
        server_name  _; # _代表默认域名
        charset utf-8;
        access_log /data/log/nginx/access_reverse.log  main;
        #反向流量
#        location /http {
#                proxy_pass http://arrow_dc_four_reverse;
#                proxy_set_header X-Real-IP $remote_addr;
#                proxy_set_header Host $host;
#                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#        }
        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }
        location ~ ^(.*)\/\.(svn|git|hg|bzr|cvs)\/ { # 屏蔽这些目录
                deny all;
                access_log off;
                log_not_found off;
        }
        location ~ /\. { # 屏蔽.开头的目录或文件，比如  .htaccess .bash_history
                deny all;
                access_log off;
                log_not_found off;
        }
        location /do_not_delete.html {
                access_log off;
                empty_gif;
        }
}

}
